TODO:
- implement missing AST nodes
    TODO: TraverseAtomicExpr
    TODO: TraverseAtomicTypeLoc
    TODO: TraverseAttributedTypeLoc
    TODO: TraverseBinaryTypeTraitExpr
    TODO: TraverseCapturedDecl
    TODO: TraverseCapturedStmt
    TODO: TraverseChooseExpr
    TODO: TraverseExtVectorTypeLoc
    TODO: TraverseLabelDecl
    TODO: TraverseStaticAssertDecl
    TODO: TraverseVectorTypeLoc

- generate simplified AST structure where types_ are types and no
  wrapper-records are used. I.e.
    { e = UnaryOperator (UO_Plus, { e = IntegerLiteral 1; ...}); ... }
    =>
    UnaryOperator (UO_Plus, IntegerLiteral 1)
  We will lose source locations, but this type can be useful to look
  up ctyps. E.g.
    lookup (PointerType (BuiltinType BT_Int))
    =
    { t = PointerType ({ t = BuiltinType BT_Int; ... }); ... }
  This will lose type qualifiers, which is bad, so we may want lookup to
  return a set of types with different qualifiers (all types present
  in the analysed program).
- make it possible to read more than one input source file using the same
  clang process
- add a way to create new clang AST nodes from ocaml AST nodes
- think about location tracking in the presence of heavy transformations
  - we use SourceLocations, so there seems to be nothing we can do
    to create new ones

DONE:
- Unit => UnitExpr
- keep track of which ADTs are enums and which are class hierarchies
- make sure enum/constant ADTs are passed and stored by value, not by pointer
- use clang AST visitor to construct a bridge-AST
- figure out where to put the type/location information
  - in the AST itself?
  - make it queriable through an opaque clang pointer?
  => done: we just use clang SourceLocations
