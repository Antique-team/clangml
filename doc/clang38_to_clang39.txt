How to update the version of clang supported by clangml:
example going from clang-3.8.0 to clang-3.9.0

author: francois.berenger@inria.fr
date: Thu Nov 17 2016

I Prerequisite
==============

I.1 OS
------

Recommended is a recent Ubuntu Linux version or a Mac OSX with brew[0]
installed.

I.2 OCaml
---------

You should have OCaml v4.03.0 installed by OPAM[1] as a non system switch.

---
opam switch 4.03.0
eval `opam config env`
---

I.2 Get clangml for clang-3.8.0
--------------------------------

---
cd ~/src
git clone https://github.com/Antique-team/clangml.git
cd clangml
git checkout clang_3.8 # branch for clang-3.8.0
opam pin -n add clangml $PWD
opam remove clangml
opam depext -i clangml # install all dependencies
---

I.3 Compile and test it
-----------------------

Simple test:
---
make
echo 'int main() { return 0; }' > test.c
./processor.native test.c
---
You should see the clang AST being printed out.

Much more thorough test:
---
# get a published version of MemCAD
cd ~/src
wget https://github.com/Antique-team/memcad/archive/v1.0.0.tar.gz
tar xzf v1.0.0.tar.gz
cd memcad-1.0.0
opam pin -n add memcad $PWD
make
# launch the regression test suite
make prtp
---
All memcad tests should pass without any error.

II Switch to clang-3.9.0
========================

II.1 Install clang-3.9.0
------------------------

---
# remove previous one
sudo apt-get remove clang-3.8 libclang-3.8-dev llvm-3.8-dev
# get new one
mkdir ~/usr
cd ~usr
wget http://llvm.org/releases/3.9.0/clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
tar xJf clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
mv clang+llvm-3.9.0* clang39
---

Do some setup so that the newly installed commands clang++, llvm-config
and clang-3.9 can all be found in your PATH.

XXX General guidelines regarding the upgrade
============================================

Each compilation error will force you to update the file clang/clang/ast.ml
(AST nodes).
For each enum case that you need to add in this file, you will
need to update the file clang/clang/pp.ml accordingly (pretty printing
of AST nodes).
If some [name]Type AST node was added, the file clang/clang/types.ml
needs to be updated accordingly.
If some [name]Decl AST node was added, the file
plugin/c++/OcamlVisitor/Decl.cpp needs to be modified accordingly.
If some [name]Expr AST node was added, the file
plugin/c++/OcamlVisitor/Expr.cpp needs to be updated.
If some [name]Stmt or [name]Directive AST node was added, the file
plugin/c++/OcamlVisitor/Stmt.cpp needs to be updated.
If some [name]Type AST node was added, the file
plugin/c++/OcamlVisitor/Type.cpp needs to be updated.
If a [name]Type AST node is added/updated, the file
plugin/c++/OCamlVisitor/TypeLoc.cpp also needs to be updated.
If some enums were modified in clang, some modifications might be needed
in plugin/c++/clang_enums.cpp and plugin/c++/clang_enums.h.

To modify one of the previously mentioned file: look at the HTML
documentation of the new/modified AST node first.
Then, modify any impacted file by taking example from code that was
already in the file previously.
It is recommended to modify clang/clang/ast.ml only step by step: do one
modification at a time in there, then modify all the other impacted files
until they compile before introducing one more change in ast.ml.

III Update clangml until it fully compiles
==========================================

Here is the list of files that are impacted by this clang update:

---
clang/clang/api.ml
clang/clang/ast.ml
clang/clang/pp.ml
myocamlbuild.ml
plugin/c++/OCamlVisitor/Decl.cpp
plugin/c++/OCamlVisitor/Expr.cpp
plugin/c++/OCamlVisitor/Stmt.cpp
plugin/c++/clang_enums.cpp
plugin/c++/clang_ranges.h
---

You will have to change something in each of them.

Here is a preview of what you will have to do, file by file.

* myocamlbuild.ml:
Update the clang version number.
Remove -Werror=date-time from the cxxflags with a sed command.
We need to add -I`llvm_config --includedir` to the cxxflags.
In ldflags, we need to add -lLLVMCore.

After those changes, we should be able to start compiling clangml
using ocamlbuild (invoked by 'make').

* clang/clang/api.ml:
Update c_compiler version number.

* clang/clang/ast.ml
You should do them one by one, but here are all the AST nodes to add:
ATK_attr_swiftcall
ATK_preserve_most
ATK_preserve_all

BT_Float128

BT_OCLImage1dRO
BT_OCLImage1dArrayRO
BT_OCLImage1dBufferRO
BT_OCLImage2dRO
BT_OCLImage2dArrayRO
BT_OCLImage2dArrayDepthRO
BT_OCLImage2dArrayMSAARO
BT_OCLImage2dArrayMSAADepthRO
BT_OCLImage2dDepthRO
BT_OCLImage2dMSAARO
BT_OCLImage2dMSAADepthRO
BT_OCLImage3dRO
BT_OCLImage1dWO
BT_OCLImage1dArrayWO
BT_OCLImage1dBufferWO
BT_OCLImage2dWO
BT_OCLImage2dArrayWO
BT_OCLImage2dArrayDepthWO
BT_OCLImage2dArrayMSAAWO
BT_OCLImage2dArrayMSAADepthWO
BT_OCLImage2dDepthWO
BT_OCLImage2dMSAAWO
BT_OCLImage2dMSAADepthWO
BT_OCLImage3dWO
BT_OCLImage1dRW
BT_OCLImage1dArrayRW
BT_OCLImage1dBufferRW
BT_OCLImage2dRW
BT_OCLImage2dArrayRW
BT_OCLImage2dArrayDepthRW
BT_OCLImage2dArrayMSAARW
BT_OCLImage2dArrayMSAADepthRW
BT_OCLImage2dDepthRW
BT_OCLImage2dMSAARW
BT_OCLImage2dMSAADepthRW
BT_OCLImage3dRW

CXXInheritedCtorInitExpr

ObjCAvailabilityCheckExpr

OMPDistributeParallelForDirective
OMPDistributeParallelForSimdDirective
OMPDistributeSimdDirective

OMPTargetEnterDataDirective
OMPTargetExitDataDirective
OMPTargetParallelDirective
OMPTargetParallelForDirective
OMPTargetParallelForSimdDirective
OMPTargetUpdateDirective

ConstructorUsingShadowDecl

OMPCapturedExprDecl
OMPDeclareReductionDecl

PragmaCommentDecl
PragmaDetectMismatchDecl

* clang/clang/pp.ml:
Each of the previously listed new AST nodes should be reflected
into pp.ml.

* plugin/c++/clang_ranges.h:
The class clang::DesignatedInitExpr no more has the methods
designators_begin and designators_end, we must find the new
method in clang-3.9.0 doxygen documentation and use it.
FBR: tell where is this doc online

* plugin/c++/clang_enums.cpp:
The newly introduced AttributedTypeKind (new ATK_* nodes in ast.ml)
must be reflected into that file.
The new OpenCL ast nodes (OCL* in ast.ml) must also be reflected in here.

* plugin/c++/OCamlVisitor/Decl.cpp:
We can ignore the new AST nodes related to OpenMP or C++
since we are interested only in the C AST.
However, maybe one day someone will want to support those AST nodes.
To ignore them, use
UNIMP_DECL (AST_NODE).
All new AST nodes in ast.ml ending in *Decl must be handled in here.

* plugin/c++/OCamlVisitor/Expr.cpp
All new AST nodes in ast.ml ending in *Expr must be handled in here.
Use UNIMP_STMT (AST_NODE) to ignore each.

* plugin/c++/OCamlVisitor/Stmt.cpp
All new AST nodes in ast.ml ending in *Directive must be handled in here.

XXX Tag the new version of clangml
==================================

Once you are done, create a new git branch so that people can see
later on what was done to support this new clang version.
Tag and release the software.
Create a new opam package for that new clangml version.

XXX Previous upgrades examples
==============================

The branch (no more maintained) that was working with clang-3.4 is kept in git:
https://github.com/Antique-team/clangml/tree/clang_3.4

For clang-3.5 it is here:
https://github.com/Antique-team/clangml/tree/clang_update_3.5

For clang-3.6:
https://github.com/Antique-team/clangml/tree/clang_update_3.6

So, for example, if you want to see the diff between clangml for clang-3.4 and
clangml for clang-3.5, you can use git/github to see a graphical diff:

https://github.com/Antique-team/clangml/compare/clang_3.4...clang_update_3.5

References
==========

[0] http://brew.sh/
[1] https://opam.ocaml.org/
