#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
How to update the version of clang supported by clangml: example going from
 clang-3.8.0 to clang-3.9.0
\end_layout

\begin_layout Author
francois.berenger@inria.fr
\end_layout

\begin_layout Date
Thu Nov 17 2016
\end_layout

\begin_layout Section
Prerequisite
\end_layout

\begin_layout Subsection
OS
\end_layout

\begin_layout Standard
Recommended is a recent Ubuntu Linux version or a Mac OSX with brew[0] installed.
\end_layout

\begin_layout Subsection
OCaml
\end_layout

\begin_layout Standard
You should have OCaml v4.03.0 installed by OPAM[1] as a non system switch.
\end_layout

\begin_layout LyX-Code
opam switch 4.03.0
\end_layout

\begin_layout LyX-Code
eval `opam config env`
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
Clangml for clang-3.8.0
\end_layout

\begin_layout LyX-Code
cd ~/src
\end_layout

\begin_layout LyX-Code
git clone https://github.com/Antique-team/clangml.git
\end_layout

\begin_layout LyX-Code
cd clangml
\end_layout

\begin_layout LyX-Code
git checkout clang_3.8 # branch for clang-3.8.0
\end_layout

\begin_layout LyX-Code
opam pin -n add clangml $PWD
\end_layout

\begin_layout LyX-Code
opam remove clangml
\end_layout

\begin_layout LyX-Code
opam depext -i clangml # install all dependencies
\end_layout

\begin_layout Subsection
Compile and test it
\end_layout

\begin_layout Standard
Simple test:
\end_layout

\begin_layout LyX-Code
make echo 'int main() { return 0; }' > test.c
\end_layout

\begin_layout LyX-Code
./processor.native test.c
\end_layout

\begin_layout Standard
You should see the clang AST being printed out.
\end_layout

\begin_layout Standard
Much more thorough test:
\end_layout

\begin_layout LyX-Code
# get a published version of MemCAD
\end_layout

\begin_layout LyX-Code
cd ~/src
\end_layout

\begin_layout LyX-Code
wget https://github.com/Antique-team/memcad/archive/v1.0.0.tar.gz
\end_layout

\begin_layout LyX-Code
tar xzf v1.0.0.tar.gz
\end_layout

\begin_layout LyX-Code
cd memcad-1.0.0
\end_layout

\begin_layout LyX-Code
opam pin -n add memcad $PWD
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout LyX-Code
# launch the regression test suite
\end_layout

\begin_layout LyX-Code
make prtp
\end_layout

\begin_layout Standard
All memcad tests should pass without any error.
\end_layout

\begin_layout Section
Switch to clang-3.9.0
\end_layout

\begin_layout Subsection
Install clang-3.9.0
\end_layout

\begin_layout LyX-Code
# remove previous clang version
\end_layout

\begin_layout LyX-Code
sudo apt-get remove clang-3.8 libclang-3.8-dev llvm-3.8-dev
\end_layout

\begin_layout LyX-Code
# get the new version
\end_layout

\begin_layout LyX-Code
mkdir ~/usr
\end_layout

\begin_layout LyX-Code
cd ~usr
\end_layout

\begin_layout LyX-Code
wget 
\backslash
 http://llvm.org/releases/3.9.0/
\backslash

\end_layout

\begin_layout LyX-Code
clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
\end_layout

\begin_layout LyX-Code
tar 
\backslash

\end_layout

\begin_layout LyX-Code
xJf clang+llvm-3.9.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz
\end_layout

\begin_layout LyX-Code
mv clang+llvm-3.9.0* clang39
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Do some setup so that the newly installed commands clang++, llvm-config
 and clang-3.9 can all be found in your PATH.
\end_layout

\begin_layout Section
General guidelines regarding the upgrade 
\end_layout

\begin_layout Standard
Each compilation error will force you to update the file clang/clang/ast.ml
 (AST nodes).
\end_layout

\begin_layout Standard
For each AST node that you need to add in this file, you will need to update
 the file clang/clang/pp.ml accordingly (pretty printing of AST nodes).
\end_layout

\begin_layout Standard
If some [name]Type AST node was added, the file clang/clang/types.ml needs
 to be updated accordingly.
\end_layout

\begin_layout Standard
If some [name]Decl AST node was added, the file plugin/c++/OcamlVisitor/Decl.cpp
 needs to be modified accordingly.
\end_layout

\begin_layout Standard
If some [name]Expr AST node was added, the file plugin/c++/OcamlVisitor/Expr.cpp
 needs to be updated.
\end_layout

\begin_layout Standard
If some [name]Stmt or [name]Directive AST node was added, the file plugin/c++/Oc
amlVisitor/Stmt.cpp needs to be updated.
\end_layout

\begin_layout Standard
If some [name]Type AST node was added, the file plugin/c++/OcamlVisitor/Type.cpp
 needs to be updated.
\end_layout

\begin_layout Standard
If a [name]Type AST node is added/updated, the file plugin/c++/OCamlVisitor/Type
Loc.cpp also needs to be updated.
\end_layout

\begin_layout Standard
If some enums were modified in clang, some modifications might be needed
 in plugin/c++/clang_enums.cpp and plugin/c++/clang_enums.h.
\end_layout

\begin_layout Standard
To modify one of the previously mentioned file: look at the doxygen documentatio
n of the new/modified AST node first.
 Then, modify any impacted file by taking example from code that was already
 in the file previously.
 It is recommended to modify clang/clang/ast.ml only step by step: do one
 modification at a time in there, then modify all the other impacted files
 until they compile before introducing one more change in ast.ml.
\end_layout

\begin_layout Section
Update clangml until it fully compiles
\end_layout

\begin_layout Standard
Here is the list of files that are impacted by this clang update (they were
 discovered by actually doing the upgrade):
\end_layout

\begin_layout Enumerate
clang/clang/api.ml
\end_layout

\begin_layout Enumerate
clang/clang/ast.ml
\end_layout

\begin_layout Enumerate
clang/clang/pp.ml
\end_layout

\begin_layout Enumerate
myocamlbuild.ml
\end_layout

\begin_layout Enumerate
plugin/c++/OCamlVisitor/Decl.cpp
\end_layout

\begin_layout Enumerate
plugin/c++/OCamlVisitor/Expr.cpp
\end_layout

\begin_layout Enumerate
plugin/c++/OCamlVisitor/Stmt.cpp
\end_layout

\begin_layout Enumerate
plugin/c++/clang_enums.cpp plugin/c++/clang_ranges.h
\end_layout

\begin_layout Standard
You will have to change something in each of them.
\end_layout

\begin_layout Standard
Here is a preview of what you will have to do, file by file.
\end_layout

\begin_layout Standard
myocamlbuild.ml: Update the clang version number.
 Remove -Werror=date-time from the cxxflags with a sed command.
 We need to add -I`llvm_config --includedir` to the cxxflags.
 In ldflags, we need to add -lLLVMCore.
 After those changes, we should be able to start compiling clangml using
 ocamlbuild (invoked by 'make').
\end_layout

\begin_layout Standard
clang/clang/api.ml: Update c_compiler version number.
\end_layout

\begin_layout Standard
clang/clang/ast.ml:
\end_layout

\begin_layout Standard
You should do them one by one, but here are all the AST nodes to add:
\end_layout

\begin_layout Enumerate
ATK_attr_swiftcall
\end_layout

\begin_layout Enumerate
ATK_preserve_most
\end_layout

\begin_layout Enumerate
ATK_preserve_all
\end_layout

\begin_layout Enumerate
BT_Float128
\end_layout

\begin_layout Enumerate
BT_OCLImage1dRO
\end_layout

\begin_layout Enumerate
BT_OCLImage1dArrayRO
\end_layout

\begin_layout Enumerate
BT_OCLImage1dBufferRO
\end_layout

\begin_layout Enumerate
BT_OCLImage2dRO
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayRO
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayDepthRO
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayMSAARO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayMSAADepthRO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dDepthRO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dMSAARO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dMSAADepthRO BT_OCLImage3dRO 
\end_layout

\begin_layout Enumerate
BT_OCLImage1dWO
\end_layout

\begin_layout Enumerate
BT_OCLImage1dArrayWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage1dBufferWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayDepthWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayMSAAWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayMSAADepthWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dDepthWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dMSAAWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dMSAADepthWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage3dWO 
\end_layout

\begin_layout Enumerate
BT_OCLImage1dRW 
\end_layout

\begin_layout Enumerate
BT_OCLImage1dArrayRW BT_OCLImage1dBufferRW 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dRW 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayRW 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayDepthRW
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayMSAARW 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dArrayMSAADepthRW
\end_layout

\begin_layout Enumerate
BT_OCLImage2dDepthRW 
\end_layout

\begin_layout Enumerate
BT_OCLImage2dMSAARW
\end_layout

\begin_layout Enumerate
BT_OCLImage2dMSAADepthRW BT_OCLImage3dRW
\end_layout

\begin_layout Enumerate
CXXInheritedCtorInitExpr
\end_layout

\begin_layout Enumerate
ObjCAvailabilityCheckExpr
\end_layout

\begin_layout Enumerate
OMPDistributeParallelForDirective
\end_layout

\begin_layout Enumerate
OMPDistributeParallelForSimdDirective
\end_layout

\begin_layout Enumerate
OMPDistributeSimdDirective
\end_layout

\begin_layout Enumerate
OMPTargetEnterDataDirective
\end_layout

\begin_layout Enumerate
OMPTargetExitDataDirective
\end_layout

\begin_layout Enumerate
OMPTargetParallelDirective
\end_layout

\begin_layout Enumerate
OMPTargetParallelForDirective
\end_layout

\begin_layout Enumerate
OMPTargetParallelForSimdDirective
\end_layout

\begin_layout Enumerate
OMPTargetUpdateDirective
\end_layout

\begin_layout Enumerate
ConstructorUsingShadowDecl
\end_layout

\begin_layout Enumerate
OMPCapturedExprDecl 
\end_layout

\begin_layout Enumerate
OMPDeclareReductionDecl
\end_layout

\begin_layout Enumerate
PragmaCommentDecl 
\end_layout

\begin_layout Enumerate
PragmaDetectMismatchDecl
\end_layout

\begin_layout Standard
clang/clang/pp.ml: Each of the previously listed new AST nodes should be
 reflected into pp.ml.
\end_layout

\begin_layout Standard
plugin/c++/clang_ranges.h: The class clang::DesignatedInitExpr no more has
 the methods designators_begin and designators_end, we must find the new
 method in clang-3.9.0 doxygen documentation and use it.
\end_layout

\begin_layout Standard
Here is the doxygen doc for this class in clang-4.0.0 http://clang.llvm.org/doxygen/
classclang_1_1DesignatedInitExpr.html (I can't find online the doxygen doc
 for clang-3.9.0; you can download it however).
\end_layout

\begin_layout Standard
plugin/c++/clang_enums.cpp: The newly introduced AttributedTypeKind (new
 ATK_* nodes in ast.ml) must be reflected into that file.
 The new OpenCL ast nodes (OCL* in ast.ml) must also be reflected in here.
\end_layout

\begin_layout Standard
plugin/c++/OCamlVisitor/Decl.cpp: We can ignore the new AST nodes related
 to OpenMP or C++ since we are interested only in the C AST.
 However, maybe one day someone will want to support those AST nodes.
 To ignore them, use UNIMP_DECL (AST_NODE).
 All new AST nodes in ast.ml ending in *Decl must be handled in here.
\end_layout

\begin_layout Standard
plugin/c++/OCamlVisitor/Expr.cpp All new AST nodes in ast.ml ending in *Expr
 must be handled in here.
 Use UNIMP_STMT (AST_NODE) to ignore each.
\end_layout

\begin_layout Standard
plugin/c++/OCamlVisitor/Stmt.cpp All new AST nodes in ast.ml ending in *Directive
 must be handled in here.
\end_layout

\begin_layout Subsection
Tag the new version of clangml
\end_layout

\begin_layout Standard
Once you are done, create a new git branch so that people can see later
 on what was done to support this new clang version.
\end_layout

\begin_layout Standard
Tag and release the software.
\end_layout

\begin_layout Standard
Create a new opam package for that version.
\end_layout

\begin_layout Subsection
Previous upgrades examples
\end_layout

\begin_layout Standard
The branch (no more maintained) that was working with clang-3.4 is kept in
 git: https://github.com/Antique-team/clangml/tree/clang_3.4
\end_layout

\begin_layout Standard
For clang-3.5 it is here: https://github.com/Antique-team/clangml/tree/clang_updat
e_3.5
\end_layout

\begin_layout Standard
For clang-3.6: https://github.com/Antique-team/clangml/tree/clang_update_3.6
\end_layout

\begin_layout Standard
So, for example, if you want to see the diff between clangml for clang-3.4
 and clangml for clang-3.5, you can use git/github to see a graphical diff:
\end_layout

\begin_layout Standard
https://github.com/Antique-team/clangml/compare/clang_3.4...clang_update_3.5
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Standard
[0] http://brew.sh/
\end_layout

\begin_layout Standard
[1] https://opam.ocaml.org/ 
\end_layout

\end_body
\end_document
